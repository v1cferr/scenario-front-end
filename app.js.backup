// Configuração da API
const API_BASE_URL = 'http://localhost:8080/api';
let authToken = localStorage.getItem('authToken');
let currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');

// Estado da aplicação
let environments = [];
let luminaires = [];
let editingEnvironmentId = null;
let editingLuminaireId = null;
let luminariaStates = {}; // Armazena o estado de cada luminária (id -> isOn)
let sseEventSource = null; // Conexão SSE

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
});

function initializeApp() {
    if (authToken && currentUser) {
        showMainApp();
        loadData();
    } else {
        showLoginSection();
    }
    
    // Campo de brilho removido na simplificação
    // const brightnessRange = document.getElementById('lumBrightness');
    // const brightnessValue = document.getElementById('brightnessValue');
    
    // if (brightnessRange && brightnessValue) {
    //     brightnessRange.addEventListener('input', function() {
    //         brightnessValue.textContent = this.value;
    //     });
    // }
}

function setupEventListeners() {
    // Login form
    const loginForm = document.getElementById('loginForm');
    loginForm.addEventListener('submit', handleLogin);
    
    // Create environment form
    const createEnvForm = document.getElementById('createEnvironmentForm');
    createEnvForm.addEventListener('submit', handleCreateEnvironment);
    
    // Create luminaire form
    const createLumForm = document.getElementById('createLuminaireForm');
    createLumForm.addEventListener('submit', handleCreateLuminaire);
    
    // Image file input preview
    const envImageInput = document.getElementById('envImage');
    if (envImageInput) {
        envImageInput.addEventListener('change', handleImagePreview);
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });
}

// Authentication
async function handleLogin(event) {
    event.preventDefault();
    
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    showLoading(true);
    
    try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password })
        });
        
        if (response.ok) {
            const data = await response.json();
            authToken = data.token;  // Corrigido: era data.accessToken
            currentUser = { username, role: data.role || 'USER' };
            
            localStorage.setItem('authToken', authToken);
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            showMainApp();
            loadData();
            showNotification('Login realizado com sucesso!', 'success');
        } else {
            const error = await response.json();
            showNotification(error.message || 'Erro no login', 'error');
        }
    } catch (error) {
        console.error('Erro no login:', error);
        showNotification('Erro de conexão com a API', 'error');
    } finally {
        showLoading(false);
    }
}

function logout() {
    // Fechar conexão SSE
    if (sseEventSource) {
        if (sseEventSource.abort) {
            sseEventSource.abort();
        }
        sseEventSource = null;
    }
    
    // Limpar estado das luminárias
    luminariaStates = {};
    
    authToken = null;
    currentUser = null;
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    
    showLoginSection();
    showNotification('Logout realizado com sucesso!', 'success');
}

// UI Navigation
function showLoginSection() {
    document.getElementById('loginSection').style.display = 'block';
    document.getElementById('mainApp').style.display = 'none';
    document.getElementById('authInfo').style.display = 'none';
}

function showMainApp() {
    document.getElementById('loginSection').style.display = 'none';
    document.getElementById('mainApp').style.display = 'block';
    document.getElementById('authInfo').style.display = 'flex';
    document.getElementById('userInfo').textContent = `Olá, ${currentUser.username}!`;
}

// API Helpers
function getAuthHeaders() {
    return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
    };
}

async function apiRequest(endpoint, options = {}) {
    const url = `${API_BASE_URL}${endpoint}`;
    const config = {
        ...options,
        headers: {
            ...getAuthHeaders(),
            ...options.headers
        }
    };
    
    try {
        const response = await fetch(url, config);
        
        if (response.status === 401) {
            // Token expirado
            logout();
            throw new Error('Sessão expirada. Faça login novamente.');
        }
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Erro na requisição');
        }
        
        return await response.json();
    } catch (error) {
        console.error('Erro na API:', error);
        throw error;
    }
}

// Data Loading
async function loadData() {
    try {
        showLoading(true);
        console.log('📡 Carregando dados iniciais...');
        
        await Promise.all([
            loadEnvironments(),
            loadLuminaires(),
            checkHealth()
        ]);
        
        // Carregar estado inicial das luminárias
        console.log('💡 Carregando estados iniciais das luminárias...');
        await loadInitialLuminariaStates();
        
        // Conectar ao SSE após carregar os dados
        connectToSSE();
    } catch (error) {
        console.error('Erro carregando dados:', error);
        showNotification('Erro ao carregar dados: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// Carregar estado inicial das luminárias
async function loadInitialLuminariaStates() {
    try {
        console.log('🔍 Buscando estados iniciais das luminárias...');
        const response = await apiRequest('/luminaires/automation/states');
        
        if (response && response.states) {
            console.log('✅ Estados iniciais recebidos:', response.states);
            luminariaStates = response.states;
            
            // Atualizar UI com os estados carregados
            updateLuminariaStatesUI();
        } else {
            console.log('⚠️ Nenhum estado inicial encontrado, usando estados padrão (false)');
            // Inicializar todos como desligados
            luminaires.forEach(lum => {
                luminariaStates[lum.id] = false;
            });
        }
    } catch (error) {
        console.error('❌ Erro ao carregar estados iniciais:', error);
        // Em caso de erro, inicializar todos como desligados
        luminaires.forEach(lum => {
            luminariaStates[lum.id] = false;
        });
    }
}

// Conexão SSE para atualizações em tempo real usando fetch + ReadableStream
function connectToSSE() {
    // Fechar conexão anterior se existir
    if (sseEventSource) {
        if (sseEventSource.abort) {
            sseEventSource.abort();
        }
        sseEventSource = null;
    }
    
    // Verificar se temos token de autenticação
    if (!authToken) {
        console.log('❌ Token não disponível para SSE');
        return;
    }
    
    console.log('🔌 Conectando ao SSE com Authorization header...');
    
    // Log de debug adicional
    console.log('🔧 Debug SSE: Token disponível?', !!authToken);
    console.log('🔧 Debug SSE: User conectado?', !!currentUser);
    console.log('🔧 Debug SSE: URL:', `${API_BASE_URL}/luminaires/automation/events`);
    
    // Usar fetch com ReadableStream para suportar headers customizados
    const sseUrl = `${API_BASE_URL}/luminaires/automation/events`;
    const controller = new AbortController();
    sseEventSource = controller; // Armazenar o controller para poder cancelar
    
    fetch(sseUrl, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${authToken}`,
            'Accept': 'text/event-stream',
            'Cache-Control': 'no-cache'
        },
        signal: controller.signal
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        console.log('✅ Conexão SSE estabelecida');
        console.log('🔧 Debug SSE: Response headers:', Object.fromEntries(response.headers.entries()));
        showNotification('🔌 Automação conectada! Estado em tempo real ativo.', 'success');
        updateSSEStatus(true);
        
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        // Função para processar o stream
        function processStream() {
            return reader.read().then(({ done, value }) => {
                if (done) {
                    console.log('🔚 Stream SSE terminado - tentando reconectar...');
                    // Reconectar após stream terminar
                    setTimeout(() => {
                        if (authToken && currentUser) {
                            console.log('🔄 Reconectando SSE após stream terminar...');
                            connectToSSE();
                        }
                    }, 2000);
                    return;
                }
                
                // Decodificar dados recebidos
                const chunk = decoder.decode(value, { stream: true });
                console.log('📦 Chunk SSE recebido:', chunk);
                const lines = chunk.split('\n');
                
                for (let line of lines) {
                    if (line.startsWith('event:')) {
                        const eventType = line.substring(6).trim();
                        continue;
                    }
                    
                    if (line.startsWith('data:')) {
                        const eventData = line.substring(5).trim();
                        
                        try {
                            // Processar dados baseado no tipo de evento
                            if (eventData) {
                                const data = JSON.parse(eventData);
                                
                                // Detectar tipo de evento baseado na estrutura dos dados
                                if (data.allStates) {
                                    // Evento initial_state
                                    console.log('� Estado inicial das luminárias recebido:', eventData);
                                    luminariaStates = data.allStates;
                                    updateLuminariaStatesUI();
                                } else if (data.luminariaId !== undefined && data.isOn !== undefined) {
                                    // Evento state_change
                                    console.log('💡 Mudança de estado recebida:', eventData);
                                    luminariaStates[data.luminariaId] = data.isOn;
                                    updateLuminariaStateUI(data.luminariaId, data.isOn);
                                    showNotification(
                                        `Luminária ${data.luminariaId} ${data.isOn ? 'ligada' : 'desligada'}`, 
                                        'info'
                                    );
                                }
                            }
                        } catch (error) {
                            console.error('Erro processando dados SSE:', error);
                        }
                    }
                }
                
                // Continuar lendo o stream
                return processStream();
            });
        }
        
        // Iniciar processamento do stream
        return processStream();
    })
    .catch(error => {
        if (error.name === 'AbortError') {
            console.log('🔌 Conexão SSE cancelada');
            return;
        }
        
        console.error('❌ Erro na conexão SSE:', error);
        showNotification('Conexão com servidor perdida. Tentando reconectar...', 'warning');
        updateSSEStatus(false);
        
        // Tentar reconectar após 5 segundos
        setTimeout(() => {
            if (authToken && currentUser) {
                console.log('🔄 Tentando reconectar SSE...');
                connectToSSE();
            }
        }, 5000);
    });
}

// Função para processar eventos SSE
function processSSEEvent(event) {
    if (!event.data) return;
    
    try {
        const data = JSON.parse(event.data);
        
        // Log do evento recebido para debug
        console.log(`📡 Evento SSE recebido [${event.type || 'unknown'}]:`, data);
        
        // Processar diferentes tipos de eventos
        if (event.type === 'heartbeat' || data.type === 'heartbeat') {
            console.log('💓 Heartbeat recebido - conexão ativa');
            return;
        }
        
        if (data.allStates) {
            // Evento initial_state
            console.log('🏠 Estado inicial das luminárias recebido');
            luminariaStates = data.allStates;
            updateLuminariaStatesUI();
        } else if (data.luminariaId !== undefined && data.isOn !== undefined) {
            // Evento state_change
            const currentLocalState = luminariaStates[data.luminariaId];
            console.log(`💡 SSE: Luminária ${data.luminariaId} ${data.isOn ? 'LIGADA' : 'DESLIGADA'} (local: ${currentLocalState})`);
            
            // Sempre atualizar o estado local com o que vem do servidor (fonte da verdade)
            luminariaStates[data.luminariaId] = data.isOn;
            
            // Atualizar UI apenas se o estado mudou realmente
            if (currentLocalState !== data.isOn) {
                updateLuminariaStateUI(data.luminariaId, data.isOn);
                console.log(`🔄 UI atualizada via SSE: Luminária ${data.luminariaId} -> ${data.isOn}`);
            } else {
                console.log(`✅ SSE confirmou estado já atualizado: Luminária ${data.luminariaId} = ${data.isOn}`);
            }
            
            // Mostrar notificação apenas se não veio de uma ação local recente
            if (!document.hidden) {
                showNotification(
                    `Luminária ${data.luminariaId} ${data.isOn ? 'ligada' : 'desligada'}`, 
                    'info'
                );
            }
        }
    } catch (error) {
        console.error('❌ Erro processando evento SSE:', error, 'Dados:', event.data);
    }
}

// Atualizar UI de uma luminária específica
function updateLuminariaStateUI(luminariaId, isOn) {
    console.log(`🎨 Atualizando UI: Luminária ${luminariaId} -> ${isOn ? 'LIGADA' : 'DESLIGADA'}`);
    
    const lumCard = document.querySelector(`[data-luminaria-id="${luminariaId}"]`);
    if (!lumCard) {
        console.error(`❌ Card da luminária ${luminariaId} não encontrado na UI`);
        console.log('🔍 Cards disponíveis:', document.querySelectorAll('[data-luminaria-id]').length);
        return;
    }
    
    console.log(`✅ Card encontrado para luminária ${luminariaId}`);
    
    const statusIndicator = lumCard.querySelector('.status-indicator');
    const toggleBtn = lumCard.querySelector('.toggle-btn');
    
    if (statusIndicator) {
        statusIndicator.className = `status-indicator ${isOn ? 'on' : 'off'}`;
        statusIndicator.innerHTML = `<i class="fas fa-lightbulb"></i> ${isOn ? 'Ligada' : 'Desligada'}`;
        console.log(`✅ Status indicator atualizado: ${isOn ? 'Ligada' : 'Desligada'}`);
    } else {
        console.error(`❌ Status indicator não encontrado para luminária ${luminariaId}`);
    }
    
    if (toggleBtn) {
        toggleBtn.className = `btn toggle-btn ${isOn ? 'btn-danger' : 'btn-success'}`;
        toggleBtn.innerHTML = `<i class="fas fa-power-off"></i> ${isOn ? 'Desligar' : 'Ligar'}`;
        console.log(`✅ Toggle button atualizado: ${isOn ? 'Desligar' : 'Ligar'}`);
    } else {
        console.error(`❌ Toggle button não encontrado para luminária ${luminariaId}`);
    }
    
    // Forçar re-render se necessário
    lumCard.style.opacity = '0.8';
    setTimeout(() => {
        lumCard.style.opacity = '1';
    }, 100);
}

// Atualizar UI de todas as luminárias
function updateLuminariaStatesUI() {
    console.log('🔄 Atualizando UI de todas as luminárias:', luminariaStates);
    for (const [luminariaId, isOn] of Object.entries(luminariaStates)) {
        updateLuminariaStateUI(parseInt(luminariaId), isOn);
    }
}

// Função de debug para testar no console
window.debugLuminaria = function(id, state) {
    console.log(`🐛 DEBUG: Testando luminária ${id} com estado ${state}`);
    luminariaStates[id] = state;
    updateLuminariaStateUI(id, state);
};

// Função para forçar re-render das luminárias
window.forceRerender = function() {
    console.log('🔄 Forçando re-render das luminárias...');
    renderLuminaires();
};

// Função de diagnóstico completo
window.diagnosticoCompleto = function() {
    console.log('🔍 === DIAGNÓSTICO COMPLETO ===');
    console.log('📊 Estados das luminárias:', luminariaStates);
    console.log('💡 Lista de luminárias:', luminaires);
    console.log('🏠 Lista de ambientes:', environments);
    
    const cards = document.querySelectorAll('[data-luminaria-id]');
    console.log(`🃏 Cards encontrados: ${cards.length}`);
    
    cards.forEach(card => {
        const id = card.getAttribute('data-luminaria-id');
        const statusEl = card.querySelector('.status-indicator');
        const toggleBtn = card.querySelector('.toggle-btn');
        
        console.log(`🃏 Card ${id}:`, {
            card: !!card,
            status: !!statusEl,
            toggleBtn: !!toggleBtn,
            statusText: statusEl?.textContent,
            btnText: toggleBtn?.textContent
        });
    });
};

// Atualizar indicador de status SSE
function updateSSEStatus(connected) {
    const statusElement = document.getElementById('sseStatus');
    if (statusElement) {
        statusElement.className = `sse-status ${connected ? 'connected' : 'disconnected'}`;
        statusElement.innerHTML = connected 
            ? '<i class="fas fa-wifi"></i> Tempo Real Ativo' 
            : '<i class="fas fa-wifi-slash"></i> Desconectado';
    }
}

async function checkHealth() {
    try {
        const health = await fetch(`${API_BASE_URL}/health`);
        const healthData = await health.json();
        
        document.getElementById('apiStatus').textContent = healthData.status || 'Online';
        
        // Corrigir: healthData.database é um objeto, não string
        let dbInfo = 'H2 Memory';
        if (healthData.database && typeof healthData.database === 'object') {
            dbInfo = healthData.database.product || healthData.database.driver || 'Database';
        } else if (typeof healthData.database === 'string') {
            dbInfo = healthData.database;
        }
        
        document.getElementById('dbStatus').textContent = dbInfo;
        document.getElementById('envStatus').textContent = 'Ativo';
        
        // Aplicar cores baseadas no status
        const apiStatusEl = document.getElementById('apiStatus');
        const dbStatusEl = document.getElementById('dbStatus');
        
        apiStatusEl.style.color = healthData.status === 'UP' ? '#10b981' : '#ef4444';
        dbStatusEl.style.color = '#10b981';
        
    } catch (error) {
        document.getElementById('apiStatus').textContent = 'Offline';
        document.getElementById('dbStatus').textContent = 'Erro';
        document.getElementById('apiStatus').style.color = '#ef4444';
        document.getElementById('dbStatus').style.color = '#ef4444';
    }
}

async function loadEnvironments() {
    try {
        const response = await apiRequest('/environments');
        // Corrigir: API retorna paginação {content: [...]} 
        environments = Array.isArray(response) ? response : (response.content || response.environments || []);
        renderEnvironments();
        updateEnvironmentSelect();
    } catch (error) {
        console.error('Erro carregando ambientes:', error);
        environments = [];
        renderEnvironments();
    }
}

async function loadLuminaires() {
    try {
        const response = await apiRequest('/luminaires');
        // Corrigir: API retorna paginação {content: [...]}
        luminaires = Array.isArray(response) ? response : (response.content || response.luminaires || []);
        renderLuminaires();
    } catch (error) {
        console.error('Erro carregando luminárias:', error);
        luminaires = [];
        renderLuminaires();
    }
}

// Rendering
function renderEnvironments() {
    console.log('🏠 Renderizando ambientes...', environments.length, 'ambientes encontrados');
    const grid = document.getElementById('environmentsGrid');
    
    if (environments.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-home" style="font-size: 3rem; color: #d1d5db; margin-bottom: 10px;"></i>
                <p>Nenhum ambiente encontrado</p>
                <p style="font-size: 12px; color: #6b7280;">Clique em "Novo Ambiente" para começar</p>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = environments.map(env => {
        return `
            <div class="environment-card" data-environment-id="${env.id}">
                <div class="environment-image">
                    <img alt="${env.name}" 
                         style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px; margin-bottom: 15px; display: none;"
                         onerror="this.style.display='none'">
                    <div class="image-count" style="display: none; position: absolute; top: 5px; right: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px;"></div>
                </div>
                <h4><i class="fas fa-home"></i> ${env.name}</h4>
                <p>${env.description || 'Sem descrição'}</p>
                
                <div class="subambiente-section">
                    <div class="subambiente-header">
                        <span class="subambiente-label">Subambiente</span>
                    </div>
                    <div class="subambiente-display">
                        <span class="subambiente-value ${env.subambiente ? '' : 'empty'}" id="subambiente-value-${env.id}">
                            ${env.subambiente || 'Não definido'}
                        </span>
                        <button class="subambiente-edit-btn" onclick="editSubambiente(${env.id})" title="Editar subambiente">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                    <div class="subambiente-edit-form" id="subambiente-form-${env.id}">
                        <input type="text" class="subambiente-input" id="subambiente-input-${env.id}" 
                               placeholder="Ex: Closet, Banheiro, Sala..." value="${env.subambiente || ''}">
                        <div class="subambiente-actions">
                            <button class="subambiente-save-btn" onclick="saveSubambiente(${env.id})">
                                <i class="fas fa-check"></i> Salvar
                            </button>
                            <button class="subambiente-cancel-btn" onclick="cancelEditSubambiente(${env.id})">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="environment-info">
                    <small style="color: #6b7280;">ID: ${env.id}</small>
                    <small style="color: #6b7280;">Criado: ${new Date(env.createdAt).toLocaleDateString()}</small>
                </div>
                <div class="actions">
                    <button class="btn btn-secondary" onclick="editEnvironment(${env.id})">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn btn-danger" onclick="deleteEnvironment(${env.id})">
                        <i class="fas fa-trash"></i> Excluir
                    </button>
                </div>
            </div>
        `;
    }).join('');

    console.log('📋 HTML dos ambientes gerado, chamando loadEnvironmentImages()...');
    // Carregar as imagens dos ambientes após renderizar
    setTimeout(() => {
        loadEnvironmentImages();
    }, 100); // Pequeno delay para garantir que o DOM foi atualizado
}

function renderLuminaires() {
    console.log('🔄 Renderizando luminárias...', luminaires.length, 'luminárias encontradas');
    console.log('📊 Estados atuais:', luminariaStates);
    
    const grid = document.getElementById('luminairesGrid');
    
    if (luminaires.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-lightbulb" style="font-size: 3rem; color: #d1d5db; margin-bottom: 10px;"></i>
                <p>Nenhuma luminária encontrada</p>
                <p style="font-size: 12px; color: #6b7280;">Clique em "Nova Luminária" para começar</p>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = luminaires.map(lum => {
        const env = environments.find(e => e.id === lum.environmentId);
        const envName = env ? env.name : 'Ambiente não encontrado';
        const isOn = luminariaStates[lum.id] || false; // Estado da luminária
        
        console.log(`💡 Renderizando luminária ${lum.id}: ${isOn ? 'LIGADA' : 'DESLIGADA'}`);
        
        return `
            <div class="luminaire-card" data-luminaria-id="${lum.id}">
                <h4><i class="fas fa-lightbulb"></i> ${lum.name}</h4>
                <div class="luminaire-info">
                    <span><strong>ID:</strong> ${lum.id}</span>
                    <span><strong>Ambiente:</strong> ${envName}</span>
                </div>
                
                <!-- Status da luminária -->
                <div class="luminaire-status">
                    <div class="status-indicator ${isOn ? 'on' : 'off'}">
                        <i class="fas fa-lightbulb"></i> ${isOn ? 'Ligada' : 'Desligada'}
                    </div>
                </div>
                
                <!-- Controles de automação -->
                <div class="automation-controls">
                    <button class="btn toggle-btn ${isOn ? 'btn-danger' : 'btn-success'}" 
                            onclick="toggleLuminaria(${lum.id})">
                        <i class="fas fa-power-off"></i> ${isOn ? 'Desligar' : 'Ligar'}
                    </button>
                </div>
                
                <!-- Ações administrativas -->
                <div class="actions">
                    <button class="btn btn-secondary" onclick="editLuminaire(${lum.id})">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn btn-danger" onclick="deleteLuminaire(${lum.id})">
                        <i class="fas fa-trash"></i> Excluir
                    </button>
                </div>
            </div>
        `;
    }).join('');
    
    console.log('✅ Renderização das luminárias concluída');
}

function updateEnvironmentSelect() {
    const select = document.getElementById('lumEnvironment');
    select.innerHTML = '<option value="">Selecione um ambiente</option>' +
        environments.map(env => `<option value="${env.id}">${env.name}</option>`).join('');
}

// Environment Operations
async function handleCreateEnvironment(event) {
    event.preventDefault();
    
    // Se estamos editando, delegar para a função de atualização
    if (editingEnvironmentId !== null) {
        await updateEnvironment(editingEnvironmentId);
        return;
    }
    
    const name = document.getElementById('envName').value.trim();
    const description = document.getElementById('envDescription').value.trim();
    const subambiente = document.getElementById('envSubambiente').value.trim();
    const imageFile = document.getElementById('envImage').files[0];
    
    // Validações
    if (!name) {
        showNotification('Nome do ambiente é obrigatório', 'error');
        return;
    }
    
    if (name.length < 2) {
        showNotification('Nome deve ter pelo menos 2 caracteres', 'error');
        return;
    }
    
    // VALIDAÇÃO OBRIGATÓRIA DA IMAGEM
    if (!imageFile) {
        showNotification('Imagem do ambiente é obrigatória', 'error');
        return;
    }
    
    try {
        showLoading(true);
        
        // Primeiro, criar o ambiente
        const formData = {
            name,
            description: description || null,
            subambiente: subambiente || null
        };
        
        const environment = await apiRequest('/environments', {
            method: 'POST',
            body: JSON.stringify(formData)
        });
        
        // Upload da imagem é obrigatório - se falhar, deve deletar o ambiente
        try {
            await uploadEnvironmentImage(environment.id, imageFile);
        } catch (uploadError) {
            // Se upload falhar, deletar o ambiente criado
            try {
                await apiRequest(`/environments/${environment.id}`, { method: 'DELETE' });
            } catch (deleteError) {
                console.error('Erro ao deletar ambiente após falha no upload:', deleteError);
            }
            throw new Error(`Upload da imagem falhou: ${uploadError.message}`);
        }
        
        closeModal('createEnvironmentModal');
        await loadEnvironments();
        showNotification('Ambiente criado com sucesso!', 'success');
        
        // Reset form
        document.getElementById('createEnvironmentForm').reset();
    } catch (error) {
        showNotification('Erro ao criar ambiente: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

async function deleteEnvironment(id) {
    if (!confirm('Tem certeza que deseja excluir este ambiente?')) {
        return;
    }
    
    try {
        showLoading(true);
        await apiRequest(`/environments/${id}`, { method: 'DELETE' });
        await loadEnvironments();
        await loadLuminaires(); // Reload luminaires as they might be affected
        showNotification('Ambiente excluído com sucesso!', 'success');
    } catch (error) {
        showNotification('Erro ao excluir ambiente: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// Luminaire Operations
async function handleCreateLuminaire(event) {
    event.preventDefault();
    
    // Se estamos editando, delegar para a função de atualização
    if (editingLuminaireId !== null) {
        await updateLuminaire(editingLuminaireId);
        return;
    }
    
    const name = document.getElementById('lumName').value.trim();
    const environmentId = parseInt(document.getElementById('lumEnvironment').value);
    
    // Validações
    if (!name) {
        showNotification('Nome da luminária é obrigatório', 'error');
        return;
    }
    
    if (!environmentId || isNaN(environmentId)) {
        showNotification('Ambiente é obrigatório', 'error');
        return;
    }
    
    const formData = {
        name,
        environmentId
    };
    
    try {
        showLoading(true);
        await apiRequest('/luminaires', {
            method: 'POST',
            body: JSON.stringify(formData)
        });
        
        closeModal('createLuminaireModal');
        await loadLuminaires();
        showNotification('Luminária criada com sucesso!', 'success');
        
        // Reset form
        document.getElementById('createLuminaireForm').reset();
    } catch (error) {
        showNotification('Erro ao criar luminária: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

async function deleteLuminaire(id) {
    if (!confirm('Tem certeza que deseja excluir esta luminária?')) {
        return;
    }
    
    try {
        showLoading(true);
        await apiRequest(`/luminaires/${id}`, { method: 'DELETE' });
        await loadLuminaires();
        showNotification('Luminária excluída com sucesso!', 'success');
    } catch (error) {
        showNotification('Erro ao excluir luminária: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// Funções de Automação das Luminárias
async function toggleLuminaria(id) {
    console.log(`🔄 TOGGLE INICIADO: Luminária ${id}`);
    console.log('📊 Estado atual das luminárias:', luminariaStates);
    
    try {
        // Atualização otimista da UI - atualizar imediatamente para responsividade
        const currentState = luminariaStates[id] || false;
        const newState = !currentState;
        console.log(`🔄 Toggle otimista: Luminária ${id} ${currentState} -> ${newState}`);
        
        // Atualizar estado local e UI imediatamente
        luminariaStates[id] = newState;
        console.log('📊 Estado após atualização local:', luminariaStates);
        
        console.log('🎨 Chamando updateLuminariaStateUI...');
        updateLuminariaStateUI(id, newState);
        
        console.log('🌐 Fazendo requisição para API...');
        const response = await apiRequest(`/luminaires/automation/${id}/toggle`, { 
            method: 'POST' 
        });
        
        console.log(`✅ Toggle confirmado via API: Luminária ${id}:`, response);
        
        // O SSE vai confirmar o estado real do servidor
        // Se houver diferença, o SSE irá corrigir automaticamente
        
    } catch (error) {
        console.error('❌ Erro ao alternar luminária:', error);
        
        // Reverter mudança otimista em caso de erro
        const revertState = !luminariaStates[id];
        console.log(`🔄 Revertendo para estado anterior: ${revertState}`);
        luminariaStates[id] = revertState;
        updateLuminariaStateUI(id, revertState);
        
        showNotification('Erro ao controlar luminária: ' + error.message, 'error');
    }
}

async function turnOnLuminaria(id) {
    try {
        // Atualização otimista da UI
        console.log(`💡 Ligando luminária ${id} (otimista)`);
        luminariaStates[id] = true;
        updateLuminariaStateUI(id, true);
        
        const response = await apiRequest(`/luminaires/automation/${id}/turn-on`, { 
            method: 'POST' 
        });
        
        console.log(`✅ Ligar confirmado via API: Luminária ${id}:`, response);
        
    } catch (error) {
        console.error('Erro ao ligar luminária:', error);
        
        // Reverter em caso de erro
        luminariaStates[id] = false;
        updateLuminariaStateUI(id, false);
        
        showNotification('Erro ao ligar luminária: ' + error.message, 'error');
    }
}

async function turnOffLuminaria(id) {
    try {
        // Atualização otimista da UI
        console.log(`🌙 Desligando luminária ${id} (otimista)`);
        luminariaStates[id] = false;
        updateLuminariaStateUI(id, false);
        
        const response = await apiRequest(`/luminaires/automation/${id}/turn-off`, { 
            method: 'POST' 
        });
        
        console.log(`✅ Desligar confirmado via API: Luminária ${id}:`, response);
        
    } catch (error) {
        console.error('Erro ao desligar luminária:', error);
        
        // Reverter em caso de erro
        luminariaStates[id] = true;
        updateLuminariaStateUI(id, true);
        
        showNotification('Erro ao desligar luminária: ' + error.message, 'error');
    }
}

async function getLuminariaState(id) {
    try {
        const response = await apiRequest(`/luminaires/automation/${id}/state`);
        return response;
    } catch (error) {
        console.error('Erro ao obter estado da luminária:', error);
        return null;
    }
}

async function getAllLuminariaStates() {
    try {
        const response = await apiRequest('/luminaires/automation/states');
        return response.states || {};
    } catch (error) {
        console.error('Erro ao obter estados das luminárias:', error);
        return {};
    }
}

// Modal Operations
function showCreateEnvironmentModal() {
    // Limpar preview de imagem ao abrir modal para novo ambiente
    clearImagePreview('envImage');
    document.getElementById('createEnvironmentModal').style.display = 'block';
}

function showCreateLuminaireModal() {
    if (environments.length === 0) {
        showNotification('Crie um ambiente primeiro!', 'warning');
        return;
    }
    
    // Resetar flag de edição e título do modal para criar nova luminária
    editingLuminaireId = null;
    document.querySelector('#createLuminaireModal h3').textContent = 'Criar Luminária';
    
    // Carregar ambientes no select
    updateEnvironmentSelect();
    
    document.getElementById('createLuminaireModal').style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
    
    // Resetar flags de edição e títulos dos modais
    if (modalId === 'createEnvironmentModal') {
        editingEnvironmentId = null;
        document.querySelector('#createEnvironmentModal h3').textContent = 'Criar Ambiente';
        document.getElementById('createEnvironmentForm').reset();
        // Limpar preview de imagem
        clearImagePreview('envImage');
    } else if (modalId === 'createLuminaireModal') {
        editingLuminaireId = null;
        document.querySelector('#createLuminaireModal h3').textContent = 'Criar Luminária';
        document.getElementById('createLuminaireForm').reset();
    }
}

// Utility Functions
function showLoading(show) {
    document.getElementById('loadingOverlay').style.display = show ? 'block' : 'none';
}

function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <i class="fas fa-${getNotificationIcon(type)}"></i>
        <span>${message}</span>
    `;
    
    // Style the notification
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 3000;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        animation: slideInRight 0.3s ease;
        background: ${getNotificationColor(type)};
    `;
    
    document.body.appendChild(notification);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

function getNotificationIcon(type) {
    const icons = {
        success: 'check-circle',
        error: 'exclamation-triangle',
        warning: 'exclamation-circle',
        info: 'info-circle'
    };
    return icons[type] || 'info-circle';
}

function getNotificationColor(type) {
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
    };
    return colors[type] || '#3b82f6';
}

// Add CSS for notifications
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 40px;
        color: #6b7280;
    }
`;
document.head.appendChild(style);

// Implementar edição de ambientes
function editEnvironment(id) {
    const environment = environments.find(env => env.id === id);
    if (!environment) {
        showNotification('Ambiente não encontrado', 'error');
        return;
    }
    
    // Definir o ID de edição
    editingEnvironmentId = id;
    
    // Preencher o modal com dados existentes
    document.getElementById('envName').value = environment.name;
    document.getElementById('envDescription').value = environment.description || '';
    document.getElementById('envSubambiente').value = environment.subambiente || '';
    
    // Limpar upload de imagem (não tentamos preencher arquivo existente)
    clearImagePreview('envImage');
    
    // Mudar título do modal
    document.querySelector('#createEnvironmentModal h3').textContent = 'Editar Ambiente';
    
    // Abrir modal
    document.getElementById('createEnvironmentModal').style.display = 'flex';
}

async function updateEnvironment(id) {
    const name = document.getElementById('envName').value;
    const description = document.getElementById('envDescription').value;
    const subambiente = document.getElementById('envSubambiente').value.trim();
    const imageFile = document.getElementById('envImage').files[0];
    
    const formData = {
        name,
        description: description || null,
        subambiente: subambiente || null
    };
    
    try {
        showLoading(true);
        
        // Atualizar dados do ambiente
        await apiRequest(`/environments/${id}`, {
            method: 'PUT',
            body: JSON.stringify(formData)
        });
        
        // Se há uma nova imagem, fazer upload
        if (imageFile) {
            await uploadEnvironmentImage(id, imageFile);
        }
        
        closeModal('createEnvironmentModal');
        await loadEnvironments();
        showNotification('Ambiente atualizado com sucesso!', 'success');
        
        // Resetar flag de edição e restaurar título do modal
        editingEnvironmentId = null;
        document.querySelector('#createEnvironmentModal h3').textContent = 'Criar Ambiente';
    } catch (error) {
        showNotification('Erro ao atualizar ambiente: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// Implementar edição de luminárias
function editLuminaire(id) {
    const luminaire = luminaires.find(lum => lum.id === id);
    if (!luminaire) {
        showNotification('Luminária não encontrada', 'error');
        return;
    }
    
    // Definir o ID de edição
    editingLuminaireId = id;
    
    // Carregar ambientes no select primeiro
    updateEnvironmentSelect();
    
    // Preencher o modal com dados existentes (apenas campos que existem)
    document.getElementById('lumName').value = luminaire.name || '';
    document.getElementById('lumEnvironment').value = luminaire.environmentId || '';
    
    // Mudar título do modal
    document.querySelector('#createLuminaireModal h3').textContent = 'Editar Luminária';
    
    // Abrir modal
    document.getElementById('createLuminaireModal').style.display = 'flex';
}

async function updateLuminaire(id) {
    const formData = {
        name: document.getElementById('lumName').value,
        environmentId: parseInt(document.getElementById('lumEnvironment').value)
    };
    
    try {
        showLoading(true);
        await apiRequest(`/luminaires/${id}`, {
            method: 'PUT',
            body: JSON.stringify(formData)
        });
        
        closeModal('createLuminaireModal');
        await loadLuminaires();
        showNotification('Luminária atualizada com sucesso!', 'success');
        
        // Resetar flag de edição e restaurar título do modal
        editingLuminaireId = null;
        document.querySelector('#createLuminaireModal h3').textContent = 'Criar Luminária';
    } catch (error) {
        showNotification('Erro ao atualizar luminária: ' + error.message, 'error');
    } finally {
        showLoading(false);
    }
}

// Image Upload Functions
function handleImagePreview(event) {
    const file = event.target.files[0];
    const inputId = event.target.id;
    const previewId = inputId + 'Preview';
    const imgId = inputId + 'PreviewImg';
    
    const preview = document.getElementById(previewId);
    const img = document.getElementById(imgId);
    
    if (file && file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
            img.src = e.target.result;
            preview.style.display = 'flex';
        };
        reader.readAsDataURL(file);
    } else if (file) {
        showNotification('Por favor, selecione apenas arquivos de imagem', 'error');
        event.target.value = '';
    }
}

function clearImagePreview(inputId) {
    const input = document.getElementById(inputId);
    const previewId = inputId + 'Preview';
    const preview = document.getElementById(previewId);
    
    input.value = '';
    preview.style.display = 'none';
}

async function uploadEnvironmentImage(environmentId, imageFile) {
    const formData = new FormData();
    formData.append('file', imageFile);
    formData.append('imageName', `Imagem do ambiente ${environmentId}`);
    
    try {
        const response = await fetch(`${API_BASE_URL}/environments/${environmentId}/images/upload`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${authToken}`
            },
            body: formData
        });
        
        if (!response.ok) {
            const errorData = await response.text();
            throw new Error(`Erro no upload: ${response.status} - ${errorData}`);
        }

        const result = await response.json();
        console.log('Upload realizado com sucesso:', result);
        return result;
    } catch (error) {
        console.error('Erro no upload da imagem:', error);
        showNotification('Erro ao fazer upload da imagem: ' + error.message, 'error');
        throw error;
    }
}

// Função para carregar as imagens dos ambientes
async function loadEnvironmentImages() {
    console.log('🖼️ Iniciando carregamento de imagens dos ambientes...');
    
    if (!authToken) {
        console.log('❌ Token de autenticação não encontrado');
        return;
    }

    const environments = document.querySelectorAll('.environment-card');
    console.log(`📋 Encontrados ${environments.length} ambientes para carregar imagens`);
    
    for (const envCard of environments) {
        const envId = envCard.dataset.environmentId;
        console.log(`🔍 Carregando imagens para ambiente ${envId}...`);
        
        try {
            const response = await fetch(`${API_BASE_URL}/environments/${envId}/images-urls`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                console.log(`✅ Dados de imagens recebidos para ambiente ${envId}:`, data);
                
                if (data.images && data.images.length > 0) {
                    // Usar a primeira imagem como principal
                    const firstImage = data.images[0];
                    const img = envCard.querySelector('.environment-image img');
                    
                    if (img && firstImage.url) {
                        console.log(`🖼️ Configurando imagem para ambiente ${envId}: ${firstImage.url}`);
                        
                        img.onload = function() {
                            console.log(`✅ Imagem carregada com sucesso para ambiente ${envId}`);
                            img.style.display = 'block';
                        };
                        
                        img.onerror = function() {
                            console.log(`❌ Erro ao carregar imagem para ambiente ${envId}: ${firstImage.url}`);
                            img.style.display = 'none';
                        };
                        
                        img.src = firstImage.url;
                        
                        // Adicionar informações extras se existirem múltiplas imagens
                        if (data.images.length > 1) {
                            const imageCount = envCard.querySelector('.image-count');
                            if (imageCount) {
                                imageCount.textContent = `+${data.images.length - 1} imagens`;
                                imageCount.style.display = 'block';
                            }
                        }
                    }
                } else {
                    console.log(`⚠️ Nenhuma imagem encontrada para ambiente ${envId}`);
                    const img = envCard.querySelector('.environment-image img');
                    if (img) {
                        img.style.display = 'none';
                    }
                }
            } else {
                console.log(`❌ Erro ao buscar imagens para ambiente ${envId}: ${response.status}`);
            }
        } catch (error) {
            console.error(`❌ Erro de rede ao carregar imagens para ambiente ${envId}:`, error);
        }
    }
    
    console.log('🏁 Carregamento de imagens concluído');
}

// =================== FUNÇÕES DE GERENCIAMENTO DE SUBAMBIENTES ===================

function editSubambiente(envId) {
    const form = document.getElementById(`subambiente-form-${envId}`);
    const display = document.querySelector(`#subambiente-value-${envId}`).parentElement;
    const input = document.getElementById(`subambiente-input-${envId}`);
    
    // Mostrar formulário de edição
    form.classList.add('active');
    display.style.display = 'none';
    
    // Focar no input
    input.focus();
    input.select();
}

function cancelEditSubambiente(envId) {
    const form = document.getElementById(`subambiente-form-${envId}`);
    const display = document.querySelector(`#subambiente-value-${envId}`).parentElement;
    const input = document.getElementById(`subambiente-input-${envId}`);
    
    // Restaurar valor original
    const env = environments.find(e => e.id === envId);
    input.value = env ? (env.subambiente || '') : '';
    
    // Esconder formulário de edição
    form.classList.remove('active');
    display.style.display = 'flex';
}

async function saveSubambiente(envId) {
    const input = document.getElementById(`subambiente-input-${envId}`);
    const newSubambiente = input.value.trim();
    
    try {
        // Usar endpoint específico para subambientes
        const endpoint = `/environments/${envId}/subambientes`;
        const method = 'PUT';
        const body = { subambiente: newSubambiente || null };
        
        const response = await apiRequest(endpoint, {
            method: method,
            body: JSON.stringify(body)
        });
        
        // Atualizar dados locais
        const envIndex = environments.findIndex(e => e.id === envId);
        if (envIndex !== -1) {
            environments[envIndex].subambiente = newSubambiente || null;
        }
        
        // Atualizar interface
        updateSubambienteDisplay(envId, newSubambiente);
        
        // Esconder formulário
        cancelEditSubambiente(envId);
        
        showNotification(
            newSubambiente 
                ? `Subambiente "${newSubambiente}" salvo com sucesso!`
                : 'Subambiente removido com sucesso!', 
            'success'
        );
        
    } catch (error) {
        console.error('Erro ao salvar subambiente:', error);
        showNotification('Erro ao salvar subambiente: ' + error.message, 'error');
    }
}

function updateSubambienteDisplay(envId, subambiente) {
    const valueElement = document.getElementById(`subambiente-value-${envId}`);
    const form = document.getElementById(`subambiente-form-${envId}`);
    const display = valueElement.parentElement;
    
    if (subambiente) {
        valueElement.textContent = subambiente;
        valueElement.classList.remove('empty');
    } else {
        valueElement.textContent = 'Não definido';
        valueElement.classList.add('empty');
    }
    
    // Esconder formulário e mostrar display
    form.classList.remove('active');
    display.style.display = 'flex';
}

// Adicionar event listeners para Enter e Escape nos inputs de subambiente
document.addEventListener('keydown', function(event) {
    if (event.target.classList.contains('subambiente-input')) {
        const envId = parseInt(event.target.id.replace('subambiente-input-', ''));
        
        if (event.key === 'Enter') {
            event.preventDefault();
            saveSubambiente(envId);
        } else if (event.key === 'Escape') {
            event.preventDefault();
            cancelEditSubambiente(envId);
        }
    }
});

// =================== PROCESSAMENTO DE EVENTOS SSE ===================

function processSSEEvent(eventObj) {
    if (!eventObj.data) return;
    
    try {
        const data = JSON.parse(eventObj.data);
        
        // Processar heartbeat
        if (eventObj.type === 'heartbeat' || data.type === 'heartbeat') {
            console.log('💓 Heartbeat SSE recebido');
            return;
        }
        
        // Processar estado inicial
        if (data.allStates) {
            console.log('🏠 Estado inicial das luminárias recebido via SSE');
            luminariaStates = data.allStates;
            updateLuminariaStatesUI();
            return;
        }
        
        // Processar mudança de estado
        if (data.luminariaId !== undefined && data.isOn !== undefined) {
            console.log(`💡 SSE: Luminária ${data.luminariaId} ${data.isOn ? 'ligada' : 'desligada'}`);
            luminariaStates[data.luminariaId] = data.isOn;
            updateLuminariaStateUI(data.luminariaId, data.isOn);
            
            // Só mostrar notificação se a página estiver visível
            if (!document.hidden) {
                showNotification(
                    `Luminária ${data.luminariaId} ${data.isOn ? 'ligada' : 'desligada'}`, 
                    'info'
                );
            }
        }
    } catch (error) {
        console.error('Erro processando evento SSE:', error, 'Dados:', eventObj.data);
    }
}

// Detectar quando a página volta a ser visível para reconectar SSE se necessário
document.addEventListener('visibilitychange', function() {
    if (!document.hidden && authToken && currentUser) {
        // Página voltou a ser visível - verificar se SSE está conectado
        setTimeout(() => {
            if (!sseEventSource) {
                console.log('🔄 Página visível novamente - reconectando SSE...');
                connectToSSE();
            }
        }, 1000);
    }
});

// Adicionar logs quando a aba perde/ganha foco para debug
window.addEventListener('focus', function() {
    console.log('🔍 Aba ganhou foco');
});

window.addEventListener('blur', function() {
    console.log('🔍 Aba perdeu foco');
});